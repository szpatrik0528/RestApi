using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Valutak;
//
//    var valuts = Valuts.FromJson(jsonString);

namespace ValutaValto
{

    public partial class Valuts
    {
        [JsonProperty("success", Required = Required.Always)]
        public bool Success { get; set; }

        [JsonProperty("timestamp", Required = Required.Always)]
        public long Timestamp { get; set; }

        [JsonProperty("base", Required = Required.Always)]
        public string Base { get; set; }

        [JsonProperty("date", Required = Required.Always)]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("rates", Required = Required.Always)]
        public Dictionary<string, double> Rates { get; set; }
    }

    public partial class Valuts
    {
        public static Valuts FromJson(string json) => JsonConvert.DeserializeObject<Valuts>(json, ValutaValto.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Valuts self) => JsonConvert.SerializeObject(self, ValutaValto.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
